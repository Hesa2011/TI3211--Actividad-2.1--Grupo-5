#Venta de asientos de un avión de 56 puestos utilizando Arreglos de más de dos dimensiones, matrices poco densas y Matriz tridiagonal. 


import numpy as np
from scipy.sparse import lil_matrix

# Clase Pasajero
class Pasajero:
    def __init__(self, nombre, genero, asiento, boleto, clase, horario, tipo_pasajero):
        self.nombre = nombre
        self.genero = genero
        self.asiento = asiento
        self.boleto = boleto
        self.fecha_de_vuelo = "2024-09-12"
        self.destino = "Miami"
        self.clase = clase
        self.horario = horario
        self.tipo_pasajero = tipo_pasajero
        self.precio = None

    def __str__(self) -> str:
        return f"{self.nombre}, {self.genero}, Asiento: {self.asiento}, Boleto: {self.boleto}, Fecha: {self.fecha_de_vuelo}, Destino: {self.destino}, Precio: ${self.precio}"

# Precios de vuelo por clase y horario
precios_miami = {
    'Económica': {
        'Pico': {'Adulto': 400, 'Niño': 300},
        'No Pico': {'Adulto': 350, 'Niño': 250}
    },
    'Premium': {
        'Pico': {'Adulto': 600, 'Niño': 500},
        'No Pico': {'Adulto': 550, 'Niño': 450}
    }
}

def obtener_precio_vuelo(clase, horario, tipo_pasajero):
    try:
        return precios_miami[clase][horario][tipo_pasajero]
    except KeyError:
        print(f"Error: No hay precios definidos para {clase}, {horario}, {tipo_pasajero}")
        return None

# Tamaño de la matriz de asientos (8 filas, 7 columnas)
filas = 8
columnas = 7
asientos = [[None for _ in range(columnas)] for _ in range(filas)]

# Precios por fila y ajuste por columna
precios_por_fila = {0: 10, 1: 8, 2: 8, 3: 6, 4: 6, 5: 5, 6: 5, 7: 5}
ajuste_por_columna = {0: 1, 6: 1, 3: -1}

def obtener_precio_asiento(fila, columna):
    precio_base = precios_por_fila[fila]
    ajuste = ajuste_por_columna.get(columna, 0)
    return precio_base + ajuste

# Matriz antisimétrica para ajustes de precio por posición de los asientos
matriz_anti_simetrica = np.array([
    [0, 1, -1],
    [-1, 0, 1],
    [1, -1, 0]
])

def ajustar_precio_por_anti_simetria(fila, columna):
    if 0 <= fila < 3 and 0 <= columna < 3:
        ajuste = matriz_anti_simetrica[fila, columna]
        return ajuste
    else:
        return 0

# Matriz simétrica para los ajustes de precio por posición de asiento
matriz_simetrica = np.array([
    [1, 0.5, 0.5],
    [0.5, 1, 0.5],
    [0.5, 0.5, 1]
])

def ajustar_precio_por_simetria(fila, columna):
    if 0 <= fila < 3 and 0 <= columna < 3:
        ajuste = matriz_simetrica[fila, columna]
        return ajuste
    else:
        return 1  # No ajuste fuera del rango definido

def asignar_asiento(fila, columna, pasajero):
    if 0 <= fila < filas and 0 <= columna < columnas:
        if asientos[fila][columna] is None:
            precio_asiento = obtener_precio_asiento(fila, columna)

            # Aplicar ajuste de precio usando la matriz antisimétrica
            ajuste_anti_simetria = ajustar_precio_por_anti_simetria(fila, columna)
            precio_asiento += ajuste_anti_simetria

            # Aplicar ajuste de precio usando la matriz simétrica
            ajuste_simetrico = ajustar_precio_por_simetria(fila, columna)
            precio_asiento *= ajuste_simetrico

            precio_vuelo = obtener_precio_vuelo(pasajero.clase, pasajero.horario, pasajero.tipo_pasajero)
            if precio_vuelo is not None:
                pasajero.precio = precio_asiento + precio_vuelo
                pasajero.asiento = f"{fila+1}{chr(65 + columna)}"
                asientos[fila][columna] = pasajero
            else:
                print("No se pudo calcular el precio del vuelo.")
        else:
            print(f"Error: El asiento {fila+1}{chr(65 + columna)} ya está ocupado.")
    else:
        print(f"Error: Fila {fila+1} o columna {chr(65 + columna)} fuera del rango.")

def mostrar_asientos():
    for fila in range(filas):
        fila_asientos = []
        for columna in range(columnas):
            if asientos[fila][columna]:
                fila_asientos.append(f"Asiento {fila+1}{chr(65 + columna)}: {asientos[fila][columna].nombre}, Precio: ${asientos[fila][columna].precio}")
            else:
                fila_asientos.append(f"Asiento {fila+1}{chr(65 + columna)}: Vacío")
        print(" | ".join(fila_asientos))

def verificar_asientos_duplicados():
    asientos_ocupados = {}
    for fila in range(filas):
        for columna in range(columnas):
            pasajero = asientos[fila][columna]
            if pasajero:
                if pasajero.asiento in asientos_ocupados:
                    print(f"Error: El asiento {pasajero.asiento} está ocupado por más de un pasajero: {asientos_ocupados[pasajero.asiento].nombre} y {pasajero.nombre}")
                else:
                    asientos_ocupados[pasajero.asiento] = pasajero

# Lista de Pasajeros
pasajero1 = Pasajero("Maria J", "F", "7C", "C007", "Económica", "Pico", "Adulto")
pasajero2 = Pasajero("Julia M", "F", "5D", "D005", "Premium", "No Pico", "Niño")
pasajero3 = Pasajero("Armando N", "M", "1A", "A001", "Premium", "Pico", "Adulto")
pasajero4 = Pasajero("Isaac C", "M", "6A", "A006", "Económica", "No Pico", "Adulto")
pasajero5 = Pasajero("Juan G", "M", "3A", "A003", "Económica", "No Pico", "Niño")
pasajero6 = Pasajero("Jose P", "M", "4A", "A004", "Premium", "Pico", "Adulto")
pasajero7 = Pasajero("Jonas L", "M", "7F", "F007", "Premium", "Pico", "Adulto")
pasajero8 = Pasajero("Gabriella V", "F", "6F", "F006", "Premium", "Pico", "Adulto")
pasajero9 = Pasajero("Pablo L", "M", "5F", "F005", "Premium", "Pico", "Adulto")
pasajero10 = Pasajero("Esther N", "F", "4F", "F004", "Premium", "Pico", "Adulto")
pasajero11 = Pasajero("Joseph A", "M", "5F", "F005", "Premium", "Pico", "Adulto")
pasajero12 = Pasajero("Kiara S", "F", "4F", "F004", "Premium", "Pico", "Adulto")
# Asignación de asientos para los pasajeros
asignar_asiento(6, 2, pasajero1)
asignar_asiento(4, 3, pasajero2)
asignar_asiento(0, 0, pasajero3)
asignar_asiento(5, 0, pasajero4)
asignar_asiento(7, 6, pasajero5)
asignar_asiento(1, 5, pasajero6)
asignar_asiento(2, 4, pasajero7)
asignar_asiento(3, 3, pasajero8)
asignar_asiento(4, 2, pasajero9)
asignar_asiento(5, 1, pasajero10)
asignar_asiento(4, 2, pasajero11)
asignar_asiento(5, 1, pasajero12)

# Mostrar asientos
print("\nAsientos del avión:")
mostrar_asientos()


matriz_binaria = lil_matrix((8, 7))

def actualizar_matriz_binaria(fila, columna, ocupado=True):
    if ocupado:
        matriz_binaria[fila, columna] = 1
    else:
        matriz_binaria[fila, columna] = 0


for fila in range(filas):
    for columna in range(columnas):
        if asientos[fila][columna] is not None:
            actualizar_matriz_binaria(fila, columna)
        else:
            actualizar_matriz_binaria(fila, columna, ocupado=False)

# Mostrar la matriz binaria
print("\nMatriz Binaria:")
print(matriz_binaria)

